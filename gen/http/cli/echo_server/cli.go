// Code generated by goa v3.0.10, DO NOT EDIT.
//
// echo-server HTTP client CLI support package
//
// Command:
// $ goa gen github.com/kaito2/rest-api-sample/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	echoservicec "github.com/kaito2/rest-api-sample/gen/http/echo_service/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `echo-service echo-get
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` echo-service echo-get --name "Quam dolores." --age 8576636692946696796` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		echoServiceFlags = flag.NewFlagSet("echo-service", flag.ContinueOnError)

		echoServiceEchoGetFlags    = flag.NewFlagSet("echo-get", flag.ExitOnError)
		echoServiceEchoGetNameFlag = echoServiceEchoGetFlags.String("name", "REQUIRED", "Your name")
		echoServiceEchoGetAgeFlag  = echoServiceEchoGetFlags.String("age", "REQUIRED", "")
	)
	echoServiceFlags.Usage = echoServiceUsage
	echoServiceEchoGetFlags.Usage = echoServiceEchoGetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "echo-service":
			svcf = echoServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "echo-service":
			switch epn {
			case "echo-get":
				epf = echoServiceEchoGetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "echo-service":
			c := echoservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "echo-get":
				endpoint = c.EchoGet()
				data, err = echoservicec.BuildEchoGetPayload(*echoServiceEchoGetNameFlag, *echoServiceEchoGetAgeFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// echo-serviceUsage displays the usage of the echo-service command and its
// subcommands.
func echoServiceUsage() {
	fmt.Fprintf(os.Stderr, `Echo your request
Usage:
    %s [globalflags] echo-service COMMAND [flags]

COMMAND:
    echo-get: EchoGet implements echo-get.

Additional help:
    %s echo-service COMMAND --help
`, os.Args[0], os.Args[0])
}
func echoServiceEchoGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] echo-service echo-get -name STRING -age INT

EchoGet implements echo-get.
    -name STRING: Your name
    -age INT: 

Example:
    `+os.Args[0]+` echo-service echo-get --name "Quam dolores." --age 8576636692946696796
`, os.Args[0])
}
