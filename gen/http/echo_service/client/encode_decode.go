// Code generated by goa v3.1.2, DO NOT EDIT.
//
// echo-service HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/kaito2/rest-api-sample/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	echoservice "github.com/kaito2/rest-api-sample/gen/echo_service"
	goahttp "goa.design/goa/v3/http"
)

// BuildVersionRequest instantiates a HTTP request object with method and path
// set to call the "echo-service" service "version" endpoint
func (c *Client) BuildVersionRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VersionEchoServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("echo-service", "version", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeVersionResponse returns a decoder for responses returned by the
// echo-service version endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVersionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("echo-service", "version", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("echo-service", "version", resp.StatusCode, string(body))
		}
	}
}

// BuildEchoGetRequest instantiates a HTTP request object with method and path
// set to call the "echo-service" service "echo-get" endpoint
func (c *Client) BuildEchoGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*echoservice.EchoGetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("echo-service", "echo-get", "*echoservice.EchoGetPayload", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EchoGetEchoServicePath(name)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("echo-service", "echo-get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEchoGetRequest returns an encoder for requests sent to the
// echo-service echo-get server.
func EncodeEchoGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*echoservice.EchoGetPayload)
		if !ok {
			return goahttp.ErrInvalidType("echo-service", "echo-get", "*echoservice.EchoGetPayload", v)
		}
		values := req.URL.Query()
		values.Add("age", fmt.Sprintf("%v", p.Age))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeEchoGetResponse returns a decoder for responses returned by the
// echo-service echo-get endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeEchoGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("echo-service", "echo-get", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("echo-service", "echo-get", resp.StatusCode, string(body))
		}
	}
}
